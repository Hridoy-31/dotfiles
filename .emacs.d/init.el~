; Suppress the startup message
(setq inhibit-startup-message t)

; Disable visible scrollbar
(scroll-bar-mode -1)

; Disable the toolbar
(tool-bar-mode 1)

; Disable tooltips
(tooltip-mode -1)

; (set-fringe-mode 10)

; Disable the menu bar
(menu-bar-mode -1)

; Set up the visible bell
(setq visible-bell t)

; Setting up the font and size
(set-face-attribute 'default nil :font "Fira Code Retina" :height 130)

; Theme
(load-theme 'wombat)

; Make ESC key to quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

; Initialize package sources
(require 'package)

; Setting package archives
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))

; Initializing packages
(package-initialize)

; Refresh the packages
(unless package-archive-contents
  (package-refresh-contents))

; Install and initialize use-package
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

; Load use-package
(require 'use-package)

; Use use-package to install other packages every time
(setq use-package-always-ensure t)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '("e3daa8f18440301f3e54f2093fe15f4fe951986a8628e98dcd781efbec7a46f2" default))
 '(package-selected-packages
   '(auto-package-update dired-hide-dotfiles dired-open all-the-icons-dired dired-single eshell-git-prompt eterm-256color evil-nerd-commenter ccls lsp-ivy lsp-treemacs lsp-ui company-box company lsp-mode visual-fill-column org-bullets evil-magit magit counsel-projectile projectile hydra evil-collection evil general all-the-icons doom-themes helpful counsel ivy-rich which-key rainbow-delimiters doom-modeline ivy command-log-mode use-package))
 '(warning-suppress-log-types '((use-package) (use-package)))
 '(warning-suppress-types '((comp) (use-package))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

; Enable column number
(column-number-mode)

; Enable global line number
(global-display-line-numbers-mode t)

; Disable line numbers for the following modes
(dolist (mode '(org-mode-hook
		term-mode-hook
		shell-mode-hook
		eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

; Describe command side by side after executing
; M-x clm/toggle-command-log-buffer
(use-package command-log-mode)

; Using Ivy package for completion feature
(use-package ivy
  ; hides the Ivy mode from the mini buffer
  :diminish
  :bind (
	 ; Search forward
	 ("C-s" . swiper)
	 :map ivy-minibuffer-map
	 ("TAB" . ivy-alt-done)
	 ("C-l" . ivy-alt-done)
	 ("C-j" . ivy-next-line)
	 ("C-k" . ivy-previous-line)
	 :map ivy-switch-buffer-map
	 ("C-k" . ivy-previous-line)
	 ("C-l" . ivy-done)
	 ("C-d" . ivy-switch-buffer-kill)
	 :map ivy-reverse-i-search-map
	 ("C-k" . ivy-previous-line)
	 ("C-d" . ivy-reverse-i-search-kill))  
  :config
  (ivy-mode 1))

; Install additional icons for the modeline
; For the very first time after installing all-the-icons package
; run the command: M-x all-the-icons-install-fonts and M-x nerd-icons-install-fonts
(use-package all-the-icons)

; Modeline
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

; Doom themes
(use-package doom-themes
  :init (load-theme 'doom-dracula t))

; Rainbow delimiters for colorful parenthesis
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

; Showing available keybindings
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

; Additional informations of auto-completion commands
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

; Using Counsel package for more helpful descriptions of the available auto-completion commands
(use-package counsel
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-ibuffer)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history)))

; Using Helpful package for better descriptions of functions and variables
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

; Setting special personal key bindings by using "General" package
(use-package general
  :config
  (general-create-definer rune/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  ; Calling custom key binding definer
  (rune/leader-keys
   "t"  '(:ignore t :which-key "toggles")
   "tt"  '(counsel-load-theme :which-key "choose theme")))

; Evil mode
(use-package evil
  :init
  ; integrate evil in all mode
  (setq evil-want-integration t)
  ; no automatic keybindings for evil 
  (setq evil-want-keybinding nil)
  ; C-u for scrolling in Normal state
  (setq evil-want-C-u-scroll t)
  ; Disable jumping the cursor to the first character
  ; of the buffer when activating Insert mode
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  ; "Ctrl-g" to switch the mode to Normal from Insert
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  ; BACKSPACE key of VIM (remove character backward and joins the next line to that line)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ; Visual line motions will work outside of the visual-line-mode
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  ; Keeping messages and dashboard modes to Normal state
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

; "evil-collection" package is simply an extension of evil mode
(use-package evil-collection
  ; load "evil" package before loading "evil-collection" package.
  :after evil
  :config
  ; Initializing evil-collection package
  (evil-collection-init))

; Use "hydra" package for text scaling
(use-package hydra)

; defining a hydra
; The prompt will wait for 4 seconds and then exit automatically
; if no key is pressed.
(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ; "j" for zoom in
  ("j" text-scale-increase "in")
  ; "k" for zoom out
  ("k" text-scale-decrease "out")
  ; "f" for finished scaling and quit hydra
  ("f" nil "finished" :exit t))

(rune/leader-keys
  ; "Ctrl-Space-t-s" for text scaling using the hydra
  "ts" '(hydra-text-scale/body :which-key "scale text"))

; Using "Projectile" package for managing and interacting with project directories
(use-package projectile
  :diminish projectile-mode
  ; Enabling projectile mode
  :config (projectile-mode)
  ; Using ivy completion as the completion command for the projectile package
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ; Maintaing projectile package into the "~/Projects" directory always.
  (when (file-directory-p "~/Projects")
    (setq projectile-project-search-path '("~/Projects")))
  ; When switch project, always show the new project's directories and files as a list
  (setq projectile-switch-project-action #'projectile-dired))

; Extending "projectile" package by combining it with "counsel" for better completion and
; and interactive search
(use-package counsel-projectile
  :config (counsel-projectile-mode))

; "magit" is a git interface in emacs
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

; Using "magit" with "evil" keybindings
(use-package evil-magit
  :after magit)

; Org mode and it's customization
(defun org-mode-setup ()
  ; Activating the indentation inside of org mode
  (org-indent-mode)
  ; Activating variable font sizes proportional to the buffer. It will help in readability 
  ; But it will keep the headings and other hierarchical elements at fixed pitch.
  (variable-pitch-mode 1)
  ; Activates visual line mode, which will give soft wrapping of long lines. It will show
  ; long lines in separate lines (virtual) without having any real line breaking character within them.
  (visual-line-mode 1))

(defun org-font-setup ()
  ; Replacing list hyphens with dots like this (•)
  (font-lock-add-keywords 'org-mode
			  '(("^ *\\([-]\\) "
			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ; Setting fonts and sizes for different heading levels
  (dolist (face '((org-level-1 . 1.2)
		  (org-level-2 . 1.1)
		  (org-level-3 . 1.05)
		  (org-level-4 . 1.0)
		  (org-level-5 . 1.1)
		  (org-level-6 . 1.1)
		  (org-level-7 . 1.1)
		  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ; Specific org modes will have fixed pitch fonts
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

(use-package org
  ; org-mode-setup function will be activated whenever org mode is activated 
  :hook (org-mode . org-mode-setup)
  :config
  (setq org-ellipsis " ▾")
  (org-font-setup))

; Customizing the bullet points in the org mode.
(use-package org-bullets
  :after org
  ; org-bullets mode will activate whenever org mode will activate
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

; Wrap and center text in the org mode buffers
(defun org-mode-visual-fill ()
  ; Set the column width as long as it will contain 100 characters
  (setq visual-fill-column-width 100
	; Center the text within the width
	visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . org-mode-visual-fill))

; Setting up to write and show code snippets inside Org buffer 
(require 'org-tempo)

; Press "<sh" and TAB to create a shell snippet
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
; Press "<el" and TAB to create a emacs lisp snippet
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
; Press "<py" and TAB to create a python snippet
(add-to-list 'org-structure-template-alist '("py" . "src python"))

; Syntax highlighting for .conf files in Org buffer
(push '("conf-unix" . conf-unix) org-src-lang-modes)

; Showing file hierarchy in the top of the buffer and which function or class is currently activated.
(defun lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

; Using lsp (Language Server Protocol) for code completion and syntax highlighting
(use-package lsp-mode
  ; lsp-deferred is used for running lsp on the background if the buffer is changed to another
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . lsp-mode-setup)
  :init
  ; Initialize the following command before starting lsp-mode
  ; Pressing "C-c l" will invoke for the LSP related commands
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))

; User Inteface for Language Server Protocol 
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

; File explorer with Language Server Protocol features
(use-package lsp-treemacs
  :after lsp)

; For incremental auto-completion
(use-package lsp-ivy)

; C Language Server
(use-package ccls
  :after lsp-mode
  :config
  (setq ccls-executable "/usr/bin/ccls"))

; Auto-completion in code
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  ; Setting up "TAB" to insert the highlighted completion
  :bind (:map company-active-map
	      ("<tab>" . company-complete-selection))
  ; Setting up "TAB" for indent or autocompletion
  (:map lsp-mode-map
	("<tab>" . company-indent-or-complete-common))
  :custom
  ; Autocompletion menu will appear after inserting only 1 character
  (company-minimum-prefix-length 1)
  ; Autocompletion will appear as soon as typing characters
  (company-ide-delay 0.0))

; Suggesting auto-completion in a box in code
(use-package company-box
  :hook (company-mode . company-box-mode))

; For commenting and uncommenting lines or regions of texts
(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))

; Terminal emulator within emacs
(use-package term
  :config
  ; Bash shell is being used in terminal sessions
  (setq explicit-shell-file-name "bash")
  ; Setting up the terminal prompt
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

; Enabling 256 colors mode in terminal buffer
(use-package eterm-256color
  :hook (term-mode . eterm-256color-mode))

; Virtual terminal emulator (another) inside emacs
(use-package vterm
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  (setq vterm-max-scrollback 10000))

; Emacs's own shell emulator "eshell"
(defun configure-eshell()
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
  ; "Ctrl-r" is used for searching command history in eshell
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  ; "Home" key is used for getting to the Beginning Of the Line (BOL)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  ; Keybinds defined by evil mode are updated and normalized
  (evil-normalize-keymaps)

  (setq eshell-history-size 10000
	eshell-buffer-maximum-lines 10000
	; Ignore duplicate commands in history
	eshell-hist-ignoredups t
	; When input a new command, the buffer will be scrolled to the bottom,
	; where the commands are being written.
	eshell-scroll-to-bottom-on-input t))

; Enhancing the git prompt in Emacs Shell buffer "eshell"
(use-package eshell-git-prompt)

(use-package eshell
  :hook (eshell-first-time-mode . configure-eshell)
  :config

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    ; "htop", "zsh", "vim" will run on their respective window instead of within eshell buffer
    (setq eshell-visual-commands '("htop" "zsh" "vim")))

  (eshell-git-prompt-use-theme 'powerline))

; Dired customization (Built-in file manager in Emacs)
(use-package dired
  ; Stop checking if it is installed or not. (It is built-in in Emacs from the beginning)
  :ensure nil
  :commands (dired dired-jump)
  ; "Ctrl-x Ctrl-j" to open dired and the current file will be highlighted
  :bind (("C-x C-j" . dired-jump))
  ; Showing hidden files and directories will be listed first
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    ; "h" for moving up one directory in dired
    "h" 'dired-single-up-directory
    ; "l" for opening the current file in a separate buffer
    "l" 'dired-single-buffer))

; Opening files in a single buffer rather than opening each files in separate new buffers
(use-package dired-single)

; Enhancing the visual appearance of the dired buffer
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

; Opening file with pre-defined programs within dired
(use-package dired-open
  :config
  (setq dired-open-extensions '(("png" . "feh")
				("mkv" . "mpv"))))

; Hiding the dotfiles in dired buffer
(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  ; Pressing "H" in NORMAL mode will toggle dotfiles hide/show in dired buffer
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))

; Automatic updates for installed packages
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
